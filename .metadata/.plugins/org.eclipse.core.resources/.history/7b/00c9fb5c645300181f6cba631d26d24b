package com.springmvc.test;

import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.springmvc.entities.User;

/**
 * @author ZhangHeng
 * 
 */
@SessionAttributes(value={"user"},types={String.class})
@Controller
public class HelloWorld {
	
	@RequestMapping("/testView")
	public String testView(){
		System.out.println("testView");
		return "helloView";
	}
	
	
	/**
	 * 注意：在@ModelAttribute修饰的方法中，放入Map的建需要和发放相同
	 * @param id
	 * @param map
	 */
	@ModelAttribute
	public void getUser(@RequestParam(value="id",required=false) Integer id,
			Map<String,Object> map){
		if(id!=null){
			//模拟从数据库中获取对象
			User user=new User(1,"Tom","123456","1234@qq.com",11);
			System.out.println("从数据库中获取一个对象:"+user);
			map.put("user", user);
		}
		
	}
	
	@RequestMapping("/testModelAttribute")
	public String testModelAttribute(User user){
		System.out.println("修改："+user);
		return "success";
	}
	
	@RequestMapping("/testSessionAttributtes")
	public String testSessionAttributtes(Map<String,Object> map){
		User user=new User("Tom", "1234", "131@qqq.com", 20);
		map.put("user", user);
		map.put("school", "zhang");
		return "success";
	}
	
	
	@RequestMapping("/testModelAndView")
	public ModelAndView testModelAndView(){
		String viewName="success";
		ModelAndView modelAndView=new ModelAndView(viewName);
		
		//添加模型数据到ModelAndView中
		modelAndView.addObject("time",new Date());
		return modelAndView;
		
	}
	
	
	
	@RequestMapping(value = "/testServletAPI")
	public String testServletAPI(HttpServletRequest request,HttpServletResponse response) {
		System.out.println("testServletAPI,"+request+","+response);
		return "success";
	}
	
	
	/**
	 * @author ZhangHeng 1.使用@RequestMapping 注解来映射请求的URL
	 *         2.返回值会通过视图解析器解析为实际的物理试图，对于InternalResourceViewResolver
	 *         视图解析器，会做如下的解析： 通过 prefix+returnVal+后缀 得到实际的视图，然后做转发操作。
	 */
	@RequestMapping(value = "/helloworld", method = RequestMethod.POST)
	public String hello() {
		System.out.println("hello world!");
		return "success";
	}

	/**
	 * @author ZhangHeng 1.使用@RequestMapping 注解来映射请求的URL
	 *         2.返回值会通过视图解析器解析为实际的物理试图，对于InternalResourceViewResolver
	 *         视图解析器，会做如下的解析： 通过 prefix+returnVal+后缀 得到实际的视图，然后做转发操作。
	 */
	@RequestMapping(value = "/testParams", params = { "age=10" })
	public String testParams() {
		System.out.println("test Params!");
		return "success";
	}

	/**
	 * @PathVariable 可以来映射URL中的占位符到目标方法的参数中
	 * @param id
	 * @return
	 */
	@RequestMapping("/testVariable/{id}")
	public String testVariable(@PathVariable("id") Integer id) {
		System.out.println("testVariable:" + id);
		return "success";
	}

	/**
	 * @PathVariable 可以来映射URL中的占位符到目标方法的参数中
	 * @param id
	 * @return
	 */
	@RequestMapping("/pathVariable/{id}")
	public String pathVariable(@PathVariable("id") String id) {
		System.out.println("pathVariable:" + id);
		return "success";
	}

	@RequestMapping(value = "/testRest/{id}", method = RequestMethod.GET)
	public String testRestGet(@PathVariable("id") Integer id) {
		System.out.println("testRestGet:" + id);
		return "success";
	}

	@RequestMapping(value = "/testRest/{id}", method = RequestMethod.DELETE)
	public String testRestDelete(@PathVariable("id") Integer id) {
		System.out.println("testRestDelete:" + id);
		return "success";
	}

	@RequestMapping(value = "/testRest", method = RequestMethod.POST)
	public String testRestPost() {
		System.out.println("testRestPost");
		return "success";
	}

	@RequestMapping(value = "/testRest/{id}", method = RequestMethod.PUT)
	public String testRestPut(@PathVariable("id") Integer id) {
		System.out.println("testRestPut:" + id);
		return "success";
	}

	@RequestMapping(value = "/testRequestParam")
	public String testRequestParam(
			@RequestHeader(value="Accept-Language") String al, @RequestParam(value = "username") String un,
			@RequestParam(value = "age", required = false, defaultValue = "0") Integer age) {
		System.out.println("username:" + un + "; age:" + age+"; Accept-Language:"+al);
		return "success";
	}
	
	@RequestMapping(value="/testCookieValue")
	public String testCookieValue(@CookieValue(value="JSESSIONID") String cookie){
		System.out.println("testCookieValue:"+cookie);
		return "success";
	}

	@RequestMapping("/testPojo")
	public String testPojo(User user){
		System.out.println("testPojo:"+user);
		return "success";
	}
}
